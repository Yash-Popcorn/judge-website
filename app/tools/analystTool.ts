import { tool, generateText } from 'ai';
import { z } from 'zod';
import Exa from 'exa-js';
import { google } from '@ai-sdk/google';

// --- Remove Mermaid Initialization at module level ---
// mermaid.initialize({ ... }); 
// console.log("Removed global Mermaid initialization.");

// --- Exa Client Initialization (Restore) ---
const exaApiKey = process.env.EXA_API_KEY;
let exa: Exa | undefined;
if (exaApiKey) {
    exa = new Exa(exaApiKey);
} else {
    console.warn("EXA_API_KEY environment variable is not set. Analyst tool documentation search will be skipped.");
}

// Define the input schema for the analyst tool
const analystToolInputSchema = z.object({
    query: z.string().describe('Detailed query specifying the mermaid.js diagram type, data, and relationships to visualize.'),
});

// Define the type for the output structure - add evaluation info
export type AnalystToolResult = z.infer<z.ZodObject<{
    mermaidCode: z.ZodOptional<z.ZodString>;
    error: z.ZodOptional<z.ZodString>;
    attempts: z.ZodOptional<z.ZodNumber>;
    docLookupError: z.ZodOptional<z.ZodString>;
    evaluationFeedback: z.ZodOptional<z.ZodString>; // Feedback from the evaluator LLM
}>>;

// Initialize a separate LLM instance for diagram generation
// This could be the same model type or a different one optimized for code generation
const diagramGeneratorLlm = google('gemini-2.5-pro-preview-03-25');
const evaluatorLlm = google('gemini-2.5-pro-preview-03-25');

// --- Helper to Extract Diagram Type (Restore) ---
function extractDiagramType(query: string): string | null {
    const lowerQuery = query.toLowerCase();
    const types = ['flowchart', 'sequenceDiagram', 'gantt', 'classDiagram', 'stateDiagram', 'pie', 'journey', 'c4context', 'gitGraph', 'xychart', 'block', 'sankey', 'architecture']; // Added more types
     for (const type of types) {
        const regex = new RegExp(`\\b${type}\\b|mermaid\\.js ${type}|${type} diagram`, 'i');
        if (regex.test(lowerQuery)) {
             if (type === 'stateDiagram' && lowerQuery.includes('statediagram-v2')) {
                 return 'stateDiagram-v2';
             }
             if (type === 'xychart' && lowerQuery.includes('xychart-beta')) {
                 return 'xychart-beta';
             }
              if (type === 'block' && lowerQuery.includes('block-beta')) {
                 return 'block-beta';
             }
            return type;
        }
    }
    return null;
}

// --- Helper to Search Docs (Restore) ---
async function searchMermaidDocs(diagramType: string): Promise<{ content?: string; error?: string }> {
    if (!exa) { return { error: "Exa client not initialized (API key missing)." }; }
    const searchQuery = `Mermaid.js ${diagramType} syntax documentation examples`;
    console.log(`Searching Mermaid docs with query: "${searchQuery}"`);
    try {
        const response = await exa.searchAndContents(searchQuery, { numResults: 2, text: { maxCharacters: 1500 } });
        if (!response.results || response.results.length === 0) { return { error: "No documentation found." }; }
        const combinedContent = response.results.map(r => `Source: ${r.url}\nContent:\n${r.text}\n---\n`).join('\n');
        console.log(`Found Mermaid docs for ${diagramType}.`);
        return { content: combinedContent };
    } catch (error: unknown) {
         let errorMessage = 'Unknown error during documentation search.';
         if (error instanceof Error) { errorMessage = error.message; }
        console.error("Error searching Mermaid docs:", error);
        return { error: errorMessage };
    }
}

// --- NEW: LLM-based Evaluation Function ---
async function evaluateGeneratedCode(
    originalQuery: string,
    generatedCode: string,
    docContext: string
): Promise<{ isApproved: boolean; feedback: string }> {
    console.log("Evaluating generated code with LLM...");
    try {
        const systemPrompt = `You are an expert evaluator reviewing Mermaid.js code generated by another AI.
Your task is to determine if the generated code accurately and completely matches the original request.
Focus ONLY on these points:
1.  Does the diagram type in the code match the requested type?
2.  Are ALL the elements (nodes, participants, tasks, data points, etc.) mentioned in the original query present in the code?
3.  Does the code include ANY elements NOT mentioned in the original query (hallucinations)?
4.  Are the relationships/links between elements correct as per the query?

${docContext ? 'Refer to the provided documentation context if helpful for syntax rules related to the query.' : ''}

Respond with ONLY "Approved" if the code perfectly matches the query based on the criteria above.
Otherwise, respond with specific, actionable feedback explaining EXACTLY what is wrong (e.g., "Rejected: Missing node 'C'", "Rejected: Includes hallucinated link X->Z", "Rejected: Diagram type should be 'sequenceDiagram' not 'flowchart'").`;

        // Construct prompt string using concatenation
        let prompt = 'Original Request: "' + originalQuery + '"\n';
        if (docContext) {
            prompt += 'Documentation Context:\n' + docContext + '\n------\n';
        }
        prompt += 'Generated Mermaid Code to Evaluate:\n';
        prompt += '--- START CODE ---\n';
        prompt += generatedCode;
        prompt += '\n--- END CODE ---\n\n';
        prompt += 'Evaluation Result (Respond ONLY with "Approved" or "Rejected: [specific feedback]"):'

        const { text: evaluation } = await generateText({
            model: evaluatorLlm,
            system: systemPrompt,
            prompt: prompt, // Pass the concatenated prompt variable
            temperature: 0.1,
            
        });

        const feedback = evaluation.trim();
        const isApproved = feedback.toLowerCase() === 'approved';
        console.log(`LLM Evaluation Result: ${feedback}`);
        return { isApproved, feedback: isApproved ? "Code approved by LLM evaluator." : feedback };

    } catch (error: unknown) {
        let errorMessage = 'Unknown error during LLM evaluation.';
        if (error instanceof Error) { errorMessage = error.message; }
        console.error("Error during LLM evaluation:", error);
        // Default to rejection if evaluation fails
        return { isApproved: false, feedback: `Evaluation Error: ${errorMessage}` };
    }
}

export const analystTool = tool({
    description: `Generates VALIDATED Mermaid.js diagram code based on a detailed query.
                  Searches documentation, generates code, and uses an LLM evaluator to check for correctness and hallucinations.
                  Uses an optimizer loop to attempt fixes based on evaluator feedback.
                  Outputs the validated Mermaid code string or an error.`, // Updated description
    parameters: analystToolInputSchema,
    execute: async ({ query }) => {
        console.log(`Analyst Tool executing for query: ${query}`);
        let currentMermaidCode = '';
        let lastFeedback = 'No feedback yet.'; // Use 'lastFeedback' instead of 'lastError' for clarity
        let attempts = 0;
        const MAX_ATTEMPTS = 3; // Restore max attempts
        let docLookupError: string | undefined = undefined;
        let documentationContext = '';

        // --- Documentation Lookup Step (Restored) ---
        const diagramType = extractDiagramType(query);
        if (diagramType) {
            const docResult = await searchMermaidDocs(diagramType);
            if (docResult.content) {
                documentationContext = `Relevant Mermaid.js ${diagramType} Documentation:\n${docResult.content}\n------\n`;
            } else {
                docLookupError = docResult.error;
                console.warn(`Documentation lookup failed: ${docLookupError}`);
            }
        } else {
            console.warn("Could not identify diagram type from query to search docs.");
        }
        // --- End Documentation Lookup ---

        while (attempts < MAX_ATTEMPTS) {
            attempts++;
            console.log(`Analyst Tool: Attempt #${attempts}`);

            try {
                // --- Generation Step ---
                 const generatorSystemPrompt = `You are an AI assistant specialized in generating Mermaid.js code.
                         Given a query describing a diagram, generate ONLY the corresponding Mermaid code block.
                         ${attempts === 1 && documentationContext ? 'Use the provided documentation context to ensure correct syntax.' : ''}
                         Ensure the syntax is correct for the specified diagram type.
                         Do not include any explanatory text, markdown formatting (like \`\`\`mermaid), or anything other than the raw Mermaid code itself.
                         ${attempts > 1 ? 'The previous attempt was rejected by the evaluator. Please fix the code based on the feedback.' : ''}
                         EXAMPLES:
                         Input Query: mermaid.js flowchart showing A pointing to B, B pointing to C, and C pointing back to A.
                         Output Code:
                         flowchart TD
                             A --> B
                             B --> C
                             C --> A

                         Input Query: mermaid.js sequenceDiagram where Alice sends "Hello" to Bob, and Bob replies "Hi Alice" back to Alice.
                         Output Code:
                         sequenceDiagram
                             participant Alice
                             participant Bob
                             Alice->>Bob: Hello Bob!
                             Bob-->>Alice: Hi Alice!

                         Input Query: mermaid.js pie chart showing "Apples": 45, "Bananas": 25, "Cherries": 30.
                         Output Code:
                         pie
                             title Fruit Distribution
                             "Apples" : 45
                             "Bananas" : 25
                             "Cherries" : 30

                         Input Query: mermaid.js xychart-beta showing "Sales": [10, 40, 20, 30] as a line chart with title "Sales Over Time".
                         Output Code:
                         xychart-beta
                             title "Sales Over Time"
                             x-axis [1, 2, 3, 4]
                             y-axis "Sales" 0 --> 50
                             line "Sales" [10, 40, 20, 30]

                         Input Query: mermaid.js block diagram with 3 columns: block A, block B | C, block D. Link A->B, B->C, C->D.
                         Output Code:
                         block-beta
                           columns 3
                           A B D
                           C
                           A --> B
                           B --> C
                           C --> D

                         Input Query: mermaid.js sankey diagram showing Energy [100] Heat Loss, Energy [80] Electricity.
                         Output Code:
                         sankey
                             Energy [100] Heat Loss
                             Energy [80] Electricity

                         Input Query: mermaid.js architecture diagram with actor User, system WebApp, database UserDB. Link User->WebApp, WebApp->UserDB.
                         Output Code:
                         architecture
                             actor User
                             system WebApp
                             database UserDB
                             User -> WebApp : Uses
                             WebApp -> UserDB : Reads/Writes
                         `;

                 const generatorPrompt = attempts === 1
                    ? `${documentationContext}Generate the Mermaid code for the following request: ${query}`
                    : `Evaluation Feedback: "${lastFeedback}".
Please regenerate the Mermaid code, fixing the issues mentioned in the feedback based on the original request.
Original Request: ${query}
Previous Incorrect Code:
${currentMermaidCode}`;

                const { text: generatedText } = await generateText({
                    model: diagramGeneratorLlm,
                    system: generatorSystemPrompt,
                    prompt: generatorPrompt,
                    temperature: 0.1 + (attempts * 0.1),
                    
                });

                // --- Code Cleaning Step ---
                let cleanedCode = generatedText?.trim() || '';
                 if (cleanedCode.startsWith('```mermaid')) { cleanedCode = cleanedCode.substring(10); }
                 if (cleanedCode.endsWith('```')) { cleanedCode = cleanedCode.substring(0, cleanedCode.length - 3); }
                 currentMermaidCode = cleanedCode.trim();

                if (currentMermaidCode === '') {
                    lastFeedback = "LLM returned empty content after cleaning.";
                    console.warn("Mermaid code empty after cleaning fences.");
                    continue; // Try again if attempts remain
                }
                console.log(`Attempt #${attempts} Generated Code:\n${currentMermaidCode}`);

                // --- Evaluation Step ---
                const evaluationResult = await evaluateGeneratedCode(query, currentMermaidCode, documentationContext);

                if (evaluationResult.isApproved) {
                    console.log(`Code approved by evaluator after ${attempts} attempts.`);
                    return { mermaidCode: currentMermaidCode, error: undefined, attempts, docLookupError, evaluationFeedback: evaluationResult.feedback };
                } else {
                    lastFeedback = evaluationResult.feedback; // Store feedback for next attempt
                    console.warn(`Attempt #${attempts} rejected by evaluator. Feedback: ${lastFeedback}`);
                    // Loop will continue if attempts < MAX_ATTEMPTS
                }

            } catch (error: unknown) {
                // Catch errors during the generateText call itself
                let errorMessage = 'An unknown error occurred during LLM generation.';
                if (error instanceof Error) { errorMessage = error.message; }
                console.error("Error during generateText call:", error);
                // Use specific feedback if generation itself failed
                lastFeedback = `Generation Error: ${errorMessage}`;
                // If generation fails catastrophically, maybe exit loop early? Or let it retry? For now, continue loop.
                 if (attempts >= MAX_ATTEMPTS) {
                    return { mermaidCode: undefined, error: `Generation failed on final attempt: ${errorMessage}`, attempts, docLookupError, evaluationFeedback: lastFeedback };
                 }
            }
        } // End while loop

        // If loop finishes without approval
        console.error(`Failed to generate approved Mermaid code after ${MAX_ATTEMPTS} attempts. Last Feedback: ${lastFeedback}`);
        return { mermaidCode: undefined, error: `Failed to get approved code after ${MAX_ATTEMPTS} attempts.`, attempts, docLookupError, evaluationFeedback: lastFeedback };
    }
}); 